/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.inf.symod.fa042.homework.chessclock;

import hu.bme.mit.inf.symod.fa042.homework.ITimer;

public class ChessClockStatemachine implements IChessClockStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean modeButton;
		
		public void raiseModeButton() {
			modeButton = true;
			runCycle();
		}
		
		private boolean startButton;
		
		public void raiseStartButton() {
			startButton = true;
			runCycle();
		}
		
		private boolean blackButton;
		
		public void raiseBlackButton() {
			blackButton = true;
			runCycle();
		}
		
		private boolean whiteButton;
		
		public void raiseWhiteButton() {
			whiteButton = true;
			runCycle();
		}
		
		protected void clearEvents() {
			modeButton = false;
			startButton = false;
			blackButton = false;
			whiteButton = false;
		}
	}
	
	protected SCIButtonsImpl sCIButtons;
	
	protected class SCIBeeperImpl implements SCIBeeper {
	
		private SCIBeeperOperationCallback operationCallback;
		
		public void setSCIBeeperOperationCallback(
				SCIBeeperOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	protected SCIBeeperImpl sCIBeeper;
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private String text;
		
		public String getText() {
			return text;
		}
		
		public void setText(String value) {
			this.text = value;
		}
		
		private long whiteDisplay;
		
		public long getWhiteDisplay() {
			return whiteDisplay;
		}
		
		public void setWhiteDisplay(long value) {
			this.whiteDisplay = value;
		}
		
		private long blackDisplay;
		
		public long getBlackDisplay() {
			return blackDisplay;
		}
		
		public void setBlackDisplay(long value) {
			this.blackDisplay = value;
		}
		
	}
	
	protected SCIDisplayImpl sCIDisplay;
	
	protected class SCIVariablesImpl implements SCIVariables {
	
		private boolean whiteStarts;
		
		public boolean getWhiteStarts() {
			return whiteStarts;
		}
		
		public void setWhiteStarts(boolean value) {
			this.whiteStarts = value;
		}
		
		private long inTime;
		
		public long getInTime() {
			return inTime;
		}
		
		public void setInTime(long value) {
			this.inTime = value;
		}
		
		private boolean gameOn;
		
		public boolean getGameOn() {
			return gameOn;
		}
		
		public void setGameOn(boolean value) {
			this.gameOn = value;
		}
		
		private long increaseTime;
		
		public long getIncreaseTime() {
			return increaseTime;
		}
		
		public void setIncreaseTime(long value) {
			this.increaseTime = value;
		}
		
	}
	
	protected SCIVariablesImpl sCIVariables;
	
	private boolean initialized = false;
	
	public enum State {
		mainText_GameStarts,
		mainText_GameStarts_r1_Setter,
		mainText_GameStarts_r1_White,
		mainText_GameStarts_r1_Black,
		mainText_GameStarts_r1_WhiteLose,
		mainText_GameStarts_r1_BlackLose,
		mainText_GameStarts_r1_PostponeW,
		mainText_GameStarts_r1_PostponeB,
		mainText_IncrementTime,
		mainText_IncrementTime_r1_Increaser,
		mainText_IncrementTime_r1_Decreaser,
		mainText_IncrementTime_r1_start,
		mainText_ReadyToPlay,
		mainText_InitialTime,
		mainText_InitialTime_r1_Increaser,
		mainText_InitialTime_r1_Decreaser,
		mainText_InitialTime_r1_start,
		whiteGamer_WhiteWaits,
		whiteGamer_WhitePlaying,
		whiteGamer_Reseting,
		whiteGamer_Start,
		blackGamer_BlackWaits,
		blackGamer_BlackPlaying,
		blackGamer_Reseting,
		blackGamer_Start,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[11];
	public ChessClockStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIBeeper = new SCIBeeperImpl();
		sCIDisplay = new SCIDisplayImpl();
		sCIVariables = new SCIVariablesImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIBeeper.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIBeeper must be set.");
		}
		
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCIDisplay.setText("Chess Clock");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
		
		sCIVariables.setWhiteStarts(true);
		
		sCIVariables.setInTime(90);
		
		sCIVariables.setGameOn(false);
		
		sCIVariables.setIncreaseTime(30);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_MainText_default();
		enterSequence_WhiteGamer_default();
		enterSequence_BlackGamer_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case mainText_GameStarts_r1_Setter:
				mainText_GameStarts_r1_Setter_react(true);
				break;
			case mainText_GameStarts_r1_White:
				mainText_GameStarts_r1_White_react(true);
				break;
			case mainText_GameStarts_r1_Black:
				mainText_GameStarts_r1_Black_react(true);
				break;
			case mainText_GameStarts_r1_WhiteLose:
				mainText_GameStarts_r1_WhiteLose_react(true);
				break;
			case mainText_GameStarts_r1_BlackLose:
				mainText_GameStarts_r1_BlackLose_react(true);
				break;
			case mainText_GameStarts_r1_PostponeW:
				mainText_GameStarts_r1_PostponeW_react(true);
				break;
			case mainText_GameStarts_r1_PostponeB:
				mainText_GameStarts_r1_PostponeB_react(true);
				break;
			case mainText_IncrementTime_r1_Increaser:
				mainText_IncrementTime_r1_Increaser_react(true);
				break;
			case mainText_IncrementTime_r1_Decreaser:
				mainText_IncrementTime_r1_Decreaser_react(true);
				break;
			case mainText_IncrementTime_r1_start:
				mainText_IncrementTime_r1_start_react(true);
				break;
			case mainText_ReadyToPlay:
				mainText_ReadyToPlay_react(true);
				break;
			case mainText_InitialTime_r1_Increaser:
				mainText_InitialTime_r1_Increaser_react(true);
				break;
			case mainText_InitialTime_r1_Decreaser:
				mainText_InitialTime_r1_Decreaser_react(true);
				break;
			case mainText_InitialTime_r1_start:
				mainText_InitialTime_r1_start_react(true);
				break;
			case whiteGamer_WhiteWaits:
				whiteGamer_WhiteWaits_react(true);
				break;
			case whiteGamer_WhitePlaying:
				whiteGamer_WhitePlaying_react(true);
				break;
			case whiteGamer_Reseting:
				whiteGamer_Reseting_react(true);
				break;
			case whiteGamer_Start:
				whiteGamer_Start_react(true);
				break;
			case blackGamer_BlackWaits:
				blackGamer_BlackWaits_react(true);
				break;
			case blackGamer_BlackPlaying:
				blackGamer_BlackPlaying_react(true);
				break;
			case blackGamer_Reseting:
				blackGamer_Reseting_react(true);
				break;
			case blackGamer_Start:
				blackGamer_Start_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_MainText();
		exitSequence_WhiteGamer();
		exitSequence_BlackGamer();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case mainText_GameStarts:
			return stateVector[0].ordinal() >= State.
					mainText_GameStarts.ordinal()&& stateVector[0].ordinal() <= State.mainText_GameStarts_r1_PostponeB.ordinal();
		case mainText_GameStarts_r1_Setter:
			return stateVector[0] == State.mainText_GameStarts_r1_Setter;
		case mainText_GameStarts_r1_White:
			return stateVector[0] == State.mainText_GameStarts_r1_White;
		case mainText_GameStarts_r1_Black:
			return stateVector[0] == State.mainText_GameStarts_r1_Black;
		case mainText_GameStarts_r1_WhiteLose:
			return stateVector[0] == State.mainText_GameStarts_r1_WhiteLose;
		case mainText_GameStarts_r1_BlackLose:
			return stateVector[0] == State.mainText_GameStarts_r1_BlackLose;
		case mainText_GameStarts_r1_PostponeW:
			return stateVector[0] == State.mainText_GameStarts_r1_PostponeW;
		case mainText_GameStarts_r1_PostponeB:
			return stateVector[0] == State.mainText_GameStarts_r1_PostponeB;
		case mainText_IncrementTime:
			return stateVector[0].ordinal() >= State.
					mainText_IncrementTime.ordinal()&& stateVector[0].ordinal() <= State.mainText_IncrementTime_r1_start.ordinal();
		case mainText_IncrementTime_r1_Increaser:
			return stateVector[0] == State.mainText_IncrementTime_r1_Increaser;
		case mainText_IncrementTime_r1_Decreaser:
			return stateVector[0] == State.mainText_IncrementTime_r1_Decreaser;
		case mainText_IncrementTime_r1_start:
			return stateVector[0] == State.mainText_IncrementTime_r1_start;
		case mainText_ReadyToPlay:
			return stateVector[0] == State.mainText_ReadyToPlay;
		case mainText_InitialTime:
			return stateVector[0].ordinal() >= State.
					mainText_InitialTime.ordinal()&& stateVector[0].ordinal() <= State.mainText_InitialTime_r1_start.ordinal();
		case mainText_InitialTime_r1_Increaser:
			return stateVector[0] == State.mainText_InitialTime_r1_Increaser;
		case mainText_InitialTime_r1_Decreaser:
			return stateVector[0] == State.mainText_InitialTime_r1_Decreaser;
		case mainText_InitialTime_r1_start:
			return stateVector[0] == State.mainText_InitialTime_r1_start;
		case whiteGamer_WhiteWaits:
			return stateVector[1] == State.whiteGamer_WhiteWaits;
		case whiteGamer_WhitePlaying:
			return stateVector[1] == State.whiteGamer_WhitePlaying;
		case whiteGamer_Reseting:
			return stateVector[1] == State.whiteGamer_Reseting;
		case whiteGamer_Start:
			return stateVector[1] == State.whiteGamer_Start;
		case blackGamer_BlackWaits:
			return stateVector[2] == State.blackGamer_BlackWaits;
		case blackGamer_BlackPlaying:
			return stateVector[2] == State.blackGamer_BlackPlaying;
		case blackGamer_Reseting:
			return stateVector[2] == State.blackGamer_Reseting;
		case blackGamer_Start:
			return stateVector[2] == State.blackGamer_Start;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIBeeper getSCIBeeper() {
		return sCIBeeper;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	public SCIVariables getSCIVariables() {
		return sCIVariables;
	}
	
	/* Entry action for state 'Setter'. */
	private void entryAction_MainText_GameStarts_r1_Setter() {
		timer.setTimer(this, 0, (1 / 1000000), true);
		
		sCIDisplay.setWhiteDisplay(sCIVariables.inTime);
		
		sCIDisplay.setBlackDisplay(sCIVariables.inTime);
		
		sCIVariables.setGameOn(true);
	}
	
	/* Entry action for state 'White'. */
	private void entryAction_MainText_GameStarts_r1_White() {
		timer.setTimer(this, 1, (1 * 1000), true);
		
		sCIDisplay.setText("White moves");
		
		sCIBeeper.operationCallback.beep();
	}
	
	/* Entry action for state 'Black'. */
	private void entryAction_MainText_GameStarts_r1_Black() {
		timer.setTimer(this, 2, (1 * 1000), true);
		
		sCIDisplay.setText("Black moves");
		
		sCIBeeper.operationCallback.beep();
	}
	
	/* Entry action for state 'WhiteLose'. */
	private void entryAction_MainText_GameStarts_r1_WhiteLose() {
		sCIDisplay.setText("White flag fallen");
		
		sCIBeeper.operationCallback.beep();
	}
	
	/* Entry action for state 'BlackLose'. */
	private void entryAction_MainText_GameStarts_r1_BlackLose() {
		sCIDisplay.setText("Black flag fallen");
		
		sCIBeeper.operationCallback.beep();
	}
	
	/* Entry action for state 'Increaser'. */
	private void entryAction_MainText_IncrementTime_r1_Increaser() {
		if ((sCIDisplay.getWhiteDisplay() + 5)>60) {
			sCIBeeper.operationCallback.beep();
		}
		if ((sCIDisplay.getWhiteDisplay() + 5)<=60) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + 5);
		}
	}
	
	/* Entry action for state 'Decreaser'. */
	private void entryAction_MainText_IncrementTime_r1_Decreaser() {
		if ((sCIDisplay.getWhiteDisplay() - 5)<0) {
			sCIBeeper.operationCallback.beep();
		}
		if ((sCIDisplay.getWhiteDisplay() - 5)>=0) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 5);
		}
	}
	
	/* Entry action for state 'start'. */
	private void entryAction_MainText_IncrementTime_r1_start() {
		sCIDisplay.setText("Increment time");
		
		sCIDisplay.setBlackDisplay(-1);
		
		sCIDisplay.setWhiteDisplay(30);
	}
	
	/* Entry action for state 'ReadyToPlay'. */
	private void entryAction_MainText_ReadyToPlay() {
		sCIDisplay.setText("Ready to play");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'Increaser'. */
	private void entryAction_MainText_InitialTime_r1_Increaser() {
		if ((sCIDisplay.getWhiteDisplay() + 30)>600) {
			sCIBeeper.operationCallback.beep();
		}
		if ((sCIDisplay.getWhiteDisplay() + 30)<=600) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + 30);
		}
	}
	
	/* Entry action for state 'Decreaser'. */
	private void entryAction_MainText_InitialTime_r1_Decreaser() {
		if ((sCIDisplay.getWhiteDisplay() - 30)<60) {
			sCIBeeper.operationCallback.beep();
		}
		if ((sCIDisplay.getWhiteDisplay() - 30)>=60) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 30);
		}
	}
	
	/* Entry action for state 'start'. */
	private void entryAction_MainText_InitialTime_r1_start() {
		sCIDisplay.setText("Initial time");
		
		sCIDisplay.setBlackDisplay(-1);
		
		sCIDisplay.setWhiteDisplay(90);
	}
	
	/* Entry action for state 'WhitePlaying'. */
	private void entryAction_WhiteGamer_WhitePlaying() {
		timer.setTimer(this, 3, (1 / 1000000), false);
		
		timer.setTimer(this, 4, (1 * 1000), true);
		
		timer.setTimer(this, 5, (1 * 1000), true);
	}
	
	/* Entry action for state 'Reseting'. */
	private void entryAction_WhiteGamer_Reseting() {
		timer.setTimer(this, 6, (1 / 1000000), true);
		
		if (((sCIDisplay.getWhiteDisplay()==sCIVariables.getInTime()) && (!sCIVariables.getWhiteStarts()))) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + (sCIVariables.increaseTime));
			
			sCIVariables.setInTime(sCIDisplay.whiteDisplay);
			
			sCIDisplay.setBlackDisplay(sCIDisplay.whiteDisplay);
		}
		if (((sCIDisplay.getWhiteDisplay() + sCIVariables.getIncreaseTime()))<sCIVariables.getInTime()) {
			sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() + (sCIVariables.increaseTime));
		}
		if ((sCIDisplay.getWhiteDisplay()<sCIVariables.getInTime() && (sCIDisplay.getWhiteDisplay() + sCIVariables.getIncreaseTime())>=sCIVariables.getInTime())) {
			sCIDisplay.setWhiteDisplay(sCIVariables.inTime);
		}
	}
	
	/* Entry action for state 'BlackPlaying'. */
	private void entryAction_BlackGamer_BlackPlaying() {
		timer.setTimer(this, 7, (1 / 1000000), false);
		
		timer.setTimer(this, 8, (1 * 1000), true);
		
		timer.setTimer(this, 9, (1 * 1000), true);
	}
	
	/* Entry action for state 'Reseting'. */
	private void entryAction_BlackGamer_Reseting() {
		timer.setTimer(this, 10, (1 / 1000000), true);
		
		if (((sCIDisplay.getBlackDisplay()==sCIVariables.getInTime()) && (sCIVariables.getWhiteStarts()))) {
			sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() + (sCIVariables.increaseTime));
			
			sCIVariables.setInTime(sCIDisplay.blackDisplay);
			
			sCIDisplay.setWhiteDisplay(sCIDisplay.blackDisplay);
		}
		if ((sCIDisplay.getBlackDisplay() + sCIVariables.getIncreaseTime())<sCIVariables.getInTime()) {
			sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() + (sCIVariables.increaseTime));
		}
		if ((sCIDisplay.getBlackDisplay()<sCIVariables.getInTime() && (sCIDisplay.getBlackDisplay() + sCIVariables.getIncreaseTime())>=sCIVariables.getInTime())) {
			sCIDisplay.setBlackDisplay(sCIVariables.inTime);
		}
	}
	
	/* Exit action for state 'Setter'. */
	private void exitAction_MainText_GameStarts_r1_Setter() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'White'. */
	private void exitAction_MainText_GameStarts_r1_White() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Black'. */
	private void exitAction_MainText_GameStarts_r1_Black() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'WhitePlaying'. */
	private void exitAction_WhiteGamer_WhitePlaying() {
		timer.unsetTimer(this, 3);
		
		timer.unsetTimer(this, 4);
		
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Reseting'. */
	private void exitAction_WhiteGamer_Reseting() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'BlackPlaying'. */
	private void exitAction_BlackGamer_BlackPlaying() {
		timer.unsetTimer(this, 7);
		
		timer.unsetTimer(this, 8);
		
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'Reseting'. */
	private void exitAction_BlackGamer_Reseting() {
		timer.unsetTimer(this, 10);
	}
	
	/* 'default' enter sequence for state GameStarts */
	private void enterSequence_MainText_GameStarts_default() {
		enterSequence_MainText_GameStarts_r1_default();
	}
	
	/* 'default' enter sequence for state Setter */
	private void enterSequence_MainText_GameStarts_r1_Setter_default() {
		entryAction_MainText_GameStarts_r1_Setter();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_Setter;
	}
	
	/* 'default' enter sequence for state White */
	private void enterSequence_MainText_GameStarts_r1_White_default() {
		entryAction_MainText_GameStarts_r1_White();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_White;
	}
	
	/* 'default' enter sequence for state Black */
	private void enterSequence_MainText_GameStarts_r1_Black_default() {
		entryAction_MainText_GameStarts_r1_Black();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_Black;
	}
	
	/* 'default' enter sequence for state WhiteLose */
	private void enterSequence_MainText_GameStarts_r1_WhiteLose_default() {
		entryAction_MainText_GameStarts_r1_WhiteLose();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_WhiteLose;
	}
	
	/* 'default' enter sequence for state BlackLose */
	private void enterSequence_MainText_GameStarts_r1_BlackLose_default() {
		entryAction_MainText_GameStarts_r1_BlackLose();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_BlackLose;
	}
	
	/* 'default' enter sequence for state PostponeW */
	private void enterSequence_MainText_GameStarts_r1_PostponeW_default() {
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_PostponeW;
	}
	
	/* 'default' enter sequence for state PostponeB */
	private void enterSequence_MainText_GameStarts_r1_PostponeB_default() {
		nextStateIndex = 0;
		stateVector[0] = State.mainText_GameStarts_r1_PostponeB;
	}
	
	/* 'default' enter sequence for state IncrementTime */
	private void enterSequence_MainText_IncrementTime_default() {
		enterSequence_MainText_IncrementTime_r1_default();
	}
	
	/* 'default' enter sequence for state Increaser */
	private void enterSequence_MainText_IncrementTime_r1_Increaser_default() {
		entryAction_MainText_IncrementTime_r1_Increaser();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_IncrementTime_r1_Increaser;
	}
	
	/* 'default' enter sequence for state Decreaser */
	private void enterSequence_MainText_IncrementTime_r1_Decreaser_default() {
		entryAction_MainText_IncrementTime_r1_Decreaser();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_IncrementTime_r1_Decreaser;
	}
	
	/* 'default' enter sequence for state start */
	private void enterSequence_MainText_IncrementTime_r1_start_default() {
		entryAction_MainText_IncrementTime_r1_start();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_IncrementTime_r1_start;
	}
	
	/* 'default' enter sequence for state ReadyToPlay */
	private void enterSequence_MainText_ReadyToPlay_default() {
		entryAction_MainText_ReadyToPlay();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_ReadyToPlay;
	}
	
	/* 'default' enter sequence for state InitialTime */
	private void enterSequence_MainText_InitialTime_default() {
		enterSequence_MainText_InitialTime_r1_default();
	}
	
	/* 'default' enter sequence for state Increaser */
	private void enterSequence_MainText_InitialTime_r1_Increaser_default() {
		entryAction_MainText_InitialTime_r1_Increaser();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_InitialTime_r1_Increaser;
	}
	
	/* 'default' enter sequence for state Decreaser */
	private void enterSequence_MainText_InitialTime_r1_Decreaser_default() {
		entryAction_MainText_InitialTime_r1_Decreaser();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_InitialTime_r1_Decreaser;
	}
	
	/* 'default' enter sequence for state start */
	private void enterSequence_MainText_InitialTime_r1_start_default() {
		entryAction_MainText_InitialTime_r1_start();
		nextStateIndex = 0;
		stateVector[0] = State.mainText_InitialTime_r1_start;
	}
	
	/* 'default' enter sequence for state WhiteWaits */
	private void enterSequence_WhiteGamer_WhiteWaits_default() {
		nextStateIndex = 1;
		stateVector[1] = State.whiteGamer_WhiteWaits;
	}
	
	/* 'default' enter sequence for state WhitePlaying */
	private void enterSequence_WhiteGamer_WhitePlaying_default() {
		entryAction_WhiteGamer_WhitePlaying();
		nextStateIndex = 1;
		stateVector[1] = State.whiteGamer_WhitePlaying;
	}
	
	/* 'default' enter sequence for state Reseting */
	private void enterSequence_WhiteGamer_Reseting_default() {
		entryAction_WhiteGamer_Reseting();
		nextStateIndex = 1;
		stateVector[1] = State.whiteGamer_Reseting;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_WhiteGamer_Start_default() {
		nextStateIndex = 1;
		stateVector[1] = State.whiteGamer_Start;
	}
	
	/* 'default' enter sequence for state BlackWaits */
	private void enterSequence_BlackGamer_BlackWaits_default() {
		nextStateIndex = 2;
		stateVector[2] = State.blackGamer_BlackWaits;
	}
	
	/* 'default' enter sequence for state BlackPlaying */
	private void enterSequence_BlackGamer_BlackPlaying_default() {
		entryAction_BlackGamer_BlackPlaying();
		nextStateIndex = 2;
		stateVector[2] = State.blackGamer_BlackPlaying;
	}
	
	/* 'default' enter sequence for state Reseting */
	private void enterSequence_BlackGamer_Reseting_default() {
		entryAction_BlackGamer_Reseting();
		nextStateIndex = 2;
		stateVector[2] = State.blackGamer_Reseting;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_BlackGamer_Start_default() {
		nextStateIndex = 2;
		stateVector[2] = State.blackGamer_Start;
	}
	
	/* 'default' enter sequence for region MainText */
	private void enterSequence_MainText_default() {
		react_MainText__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_MainText_GameStarts_r1_default() {
		react_MainText_GameStarts_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_MainText_IncrementTime_r1_default() {
		react_MainText_IncrementTime_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_MainText_InitialTime_r1_default() {
		react_MainText_InitialTime_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region WhiteGamer */
	private void enterSequence_WhiteGamer_default() {
		react_WhiteGamer__entry_Default();
	}
	
	/* 'default' enter sequence for region BlackGamer */
	private void enterSequence_BlackGamer_default() {
		react_BlackGamer__entry_Default();
	}
	
	/* Default exit sequence for state GameStarts */
	private void exitSequence_MainText_GameStarts() {
		exitSequence_MainText_GameStarts_r1();
	}
	
	/* Default exit sequence for state Setter */
	private void exitSequence_MainText_GameStarts_r1_Setter() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_MainText_GameStarts_r1_Setter();
	}
	
	/* Default exit sequence for state White */
	private void exitSequence_MainText_GameStarts_r1_White() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_MainText_GameStarts_r1_White();
	}
	
	/* Default exit sequence for state Black */
	private void exitSequence_MainText_GameStarts_r1_Black() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_MainText_GameStarts_r1_Black();
	}
	
	/* Default exit sequence for state WhiteLose */
	private void exitSequence_MainText_GameStarts_r1_WhiteLose() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state BlackLose */
	private void exitSequence_MainText_GameStarts_r1_BlackLose() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PostponeW */
	private void exitSequence_MainText_GameStarts_r1_PostponeW() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PostponeB */
	private void exitSequence_MainText_GameStarts_r1_PostponeB() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state IncrementTime */
	private void exitSequence_MainText_IncrementTime() {
		exitSequence_MainText_IncrementTime_r1();
	}
	
	/* Default exit sequence for state Increaser */
	private void exitSequence_MainText_IncrementTime_r1_Increaser() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Decreaser */
	private void exitSequence_MainText_IncrementTime_r1_Decreaser() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state start */
	private void exitSequence_MainText_IncrementTime_r1_start() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ReadyToPlay */
	private void exitSequence_MainText_ReadyToPlay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state InitialTime */
	private void exitSequence_MainText_InitialTime() {
		exitSequence_MainText_InitialTime_r1();
	}
	
	/* Default exit sequence for state Increaser */
	private void exitSequence_MainText_InitialTime_r1_Increaser() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Decreaser */
	private void exitSequence_MainText_InitialTime_r1_Decreaser() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state start */
	private void exitSequence_MainText_InitialTime_r1_start() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WhiteWaits */
	private void exitSequence_WhiteGamer_WhiteWaits() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state WhitePlaying */
	private void exitSequence_WhiteGamer_WhitePlaying() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_WhiteGamer_WhitePlaying();
	}
	
	/* Default exit sequence for state Reseting */
	private void exitSequence_WhiteGamer_Reseting() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_WhiteGamer_Reseting();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_WhiteGamer_Start() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state BlackWaits */
	private void exitSequence_BlackGamer_BlackWaits() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state BlackPlaying */
	private void exitSequence_BlackGamer_BlackPlaying() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_BlackGamer_BlackPlaying();
	}
	
	/* Default exit sequence for state Reseting */
	private void exitSequence_BlackGamer_Reseting() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_BlackGamer_Reseting();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_BlackGamer_Start() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for region MainText */
	private void exitSequence_MainText() {
		switch (stateVector[0]) {
		case mainText_GameStarts_r1_Setter:
			exitSequence_MainText_GameStarts_r1_Setter();
			break;
		case mainText_GameStarts_r1_White:
			exitSequence_MainText_GameStarts_r1_White();
			break;
		case mainText_GameStarts_r1_Black:
			exitSequence_MainText_GameStarts_r1_Black();
			break;
		case mainText_GameStarts_r1_WhiteLose:
			exitSequence_MainText_GameStarts_r1_WhiteLose();
			break;
		case mainText_GameStarts_r1_BlackLose:
			exitSequence_MainText_GameStarts_r1_BlackLose();
			break;
		case mainText_GameStarts_r1_PostponeW:
			exitSequence_MainText_GameStarts_r1_PostponeW();
			break;
		case mainText_GameStarts_r1_PostponeB:
			exitSequence_MainText_GameStarts_r1_PostponeB();
			break;
		case mainText_IncrementTime_r1_Increaser:
			exitSequence_MainText_IncrementTime_r1_Increaser();
			break;
		case mainText_IncrementTime_r1_Decreaser:
			exitSequence_MainText_IncrementTime_r1_Decreaser();
			break;
		case mainText_IncrementTime_r1_start:
			exitSequence_MainText_IncrementTime_r1_start();
			break;
		case mainText_ReadyToPlay:
			exitSequence_MainText_ReadyToPlay();
			break;
		case mainText_InitialTime_r1_Increaser:
			exitSequence_MainText_InitialTime_r1_Increaser();
			break;
		case mainText_InitialTime_r1_Decreaser:
			exitSequence_MainText_InitialTime_r1_Decreaser();
			break;
		case mainText_InitialTime_r1_start:
			exitSequence_MainText_InitialTime_r1_start();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_MainText_GameStarts_r1() {
		switch (stateVector[0]) {
		case mainText_GameStarts_r1_Setter:
			exitSequence_MainText_GameStarts_r1_Setter();
			break;
		case mainText_GameStarts_r1_White:
			exitSequence_MainText_GameStarts_r1_White();
			break;
		case mainText_GameStarts_r1_Black:
			exitSequence_MainText_GameStarts_r1_Black();
			break;
		case mainText_GameStarts_r1_WhiteLose:
			exitSequence_MainText_GameStarts_r1_WhiteLose();
			break;
		case mainText_GameStarts_r1_BlackLose:
			exitSequence_MainText_GameStarts_r1_BlackLose();
			break;
		case mainText_GameStarts_r1_PostponeW:
			exitSequence_MainText_GameStarts_r1_PostponeW();
			break;
		case mainText_GameStarts_r1_PostponeB:
			exitSequence_MainText_GameStarts_r1_PostponeB();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_MainText_IncrementTime_r1() {
		switch (stateVector[0]) {
		case mainText_IncrementTime_r1_Increaser:
			exitSequence_MainText_IncrementTime_r1_Increaser();
			break;
		case mainText_IncrementTime_r1_Decreaser:
			exitSequence_MainText_IncrementTime_r1_Decreaser();
			break;
		case mainText_IncrementTime_r1_start:
			exitSequence_MainText_IncrementTime_r1_start();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_MainText_InitialTime_r1() {
		switch (stateVector[0]) {
		case mainText_InitialTime_r1_Increaser:
			exitSequence_MainText_InitialTime_r1_Increaser();
			break;
		case mainText_InitialTime_r1_Decreaser:
			exitSequence_MainText_InitialTime_r1_Decreaser();
			break;
		case mainText_InitialTime_r1_start:
			exitSequence_MainText_InitialTime_r1_start();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region WhiteGamer */
	private void exitSequence_WhiteGamer() {
		switch (stateVector[1]) {
		case whiteGamer_WhiteWaits:
			exitSequence_WhiteGamer_WhiteWaits();
			break;
		case whiteGamer_WhitePlaying:
			exitSequence_WhiteGamer_WhitePlaying();
			break;
		case whiteGamer_Reseting:
			exitSequence_WhiteGamer_Reseting();
			break;
		case whiteGamer_Start:
			exitSequence_WhiteGamer_Start();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region BlackGamer */
	private void exitSequence_BlackGamer() {
		switch (stateVector[2]) {
		case blackGamer_BlackWaits:
			exitSequence_BlackGamer_BlackWaits();
			break;
		case blackGamer_BlackPlaying:
			exitSequence_BlackGamer_BlackPlaying();
			break;
		case blackGamer_Reseting:
			exitSequence_BlackGamer_Reseting();
			break;
		case blackGamer_Start:
			exitSequence_BlackGamer_Start();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_MainText__entry_Default() {
		enterSequence_MainText_ReadyToPlay_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MainText_GameStarts_r1__entry_Default() {
		enterSequence_MainText_GameStarts_r1_Setter_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MainText_IncrementTime_r1__entry_Default() {
		enterSequence_MainText_IncrementTime_r1_start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_MainText_InitialTime_r1__entry_Default() {
		enterSequence_MainText_InitialTime_r1_start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_WhiteGamer__entry_Default() {
		enterSequence_WhiteGamer_Start_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_BlackGamer__entry_Default() {
		enterSequence_BlackGamer_Start_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean mainText_GameStarts_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_MainText_GameStarts();
				enterSequence_MainText_ReadyToPlay_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_Setter_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_MainText_GameStarts_r1_Setter();
				enterSequence_MainText_GameStarts_r1_White_default();
				mainText_GameStarts_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_White_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[1]) && (!sCIVariables.getGameOn()))) {
				exitSequence_MainText_GameStarts_r1_White();
				enterSequence_MainText_GameStarts_r1_WhiteLose_default();
				mainText_GameStarts_react(false);
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_MainText_GameStarts_r1_White();
					enterSequence_MainText_GameStarts_r1_Black_default();
					mainText_GameStarts_react(false);
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_MainText_GameStarts_r1_White();
						enterSequence_MainText_GameStarts_r1_PostponeW_default();
						mainText_GameStarts_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_Black_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2]) && (!sCIVariables.getGameOn()))) {
				exitSequence_MainText_GameStarts_r1_Black();
				enterSequence_MainText_GameStarts_r1_BlackLose_default();
				mainText_GameStarts_react(false);
			} else {
				if (sCIButtons.blackButton) {
					exitSequence_MainText_GameStarts_r1_Black();
					enterSequence_MainText_GameStarts_r1_White_default();
					mainText_GameStarts_react(false);
				} else {
					if (sCIButtons.modeButton) {
						exitSequence_MainText_GameStarts_r1_Black();
						enterSequence_MainText_GameStarts_r1_PostponeB_default();
						mainText_GameStarts_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_WhiteLose_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_BlackLose_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_PostponeW_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_MainText_GameStarts_r1_PostponeW();
				enterSequence_MainText_GameStarts_r1_Black_default();
				mainText_GameStarts_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (sCIButtons.whiteButton) {
				sCIDisplay.setText("White adjourned");
				
				sCIBeeper.operationCallback.beep();
			}
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_GameStarts_r1_PostponeB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_MainText_GameStarts_r1_PostponeB();
				enterSequence_MainText_GameStarts_r1_White_default();
				mainText_GameStarts_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (sCIButtons.blackButton) {
				sCIDisplay.setText("Black adjourned");
				
				sCIBeeper.operationCallback.beep();
			}
			did_transition = mainText_GameStarts_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_IncrementTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_MainText_IncrementTime();
				sCIVariables.setIncreaseTime(sCIDisplay.whiteDisplay);
				
				enterSequence_MainText_ReadyToPlay_default();
			} else {
				if (sCIButtons.modeButton) {
					exitSequence_MainText_IncrementTime();
					sCIVariables.setIncreaseTime(sCIDisplay.whiteDisplay);
					
					enterSequence_MainText_ReadyToPlay_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean mainText_IncrementTime_r1_Increaser_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_MainText_IncrementTime_r1_Increaser();
				enterSequence_MainText_IncrementTime_r1_Decreaser_default();
				mainText_IncrementTime_react(false);
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_MainText_IncrementTime_r1_Increaser();
					enterSequence_MainText_IncrementTime_r1_Increaser_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_IncrementTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_IncrementTime_r1_Decreaser_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.whiteButton) {
				exitSequence_MainText_IncrementTime_r1_Decreaser();
				enterSequence_MainText_IncrementTime_r1_Increaser_default();
				mainText_IncrementTime_react(false);
			} else {
				if (sCIButtons.blackButton) {
					exitSequence_MainText_IncrementTime_r1_Decreaser();
					enterSequence_MainText_IncrementTime_r1_Decreaser_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_IncrementTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_IncrementTime_r1_start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_MainText_IncrementTime_r1_start();
				enterSequence_MainText_IncrementTime_r1_Decreaser_default();
				mainText_IncrementTime_react(false);
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_MainText_IncrementTime_r1_start();
					enterSequence_MainText_IncrementTime_r1_Increaser_default();
					mainText_IncrementTime_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_IncrementTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_ReadyToPlay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_MainText_ReadyToPlay();
				enterSequence_MainText_InitialTime_default();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_MainText_ReadyToPlay();
					sCIVariables.setGameOn(false);
					
					enterSequence_MainText_GameStarts_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean mainText_InitialTime_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.modeButton) {
				exitSequence_MainText_InitialTime();
				sCIVariables.setInTime(sCIDisplay.whiteDisplay);
				
				enterSequence_MainText_IncrementTime_default();
			} else {
				if (sCIButtons.startButton) {
					exitSequence_MainText_InitialTime();
					enterSequence_MainText_ReadyToPlay_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean mainText_InitialTime_r1_Increaser_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_MainText_InitialTime_r1_Increaser();
				enterSequence_MainText_InitialTime_r1_Decreaser_default();
				mainText_InitialTime_react(false);
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_MainText_InitialTime_r1_Increaser();
					enterSequence_MainText_InitialTime_r1_Increaser_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_InitialTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_InitialTime_r1_Decreaser_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.whiteButton) {
				exitSequence_MainText_InitialTime_r1_Decreaser();
				enterSequence_MainText_InitialTime_r1_Increaser_default();
				mainText_InitialTime_react(false);
			} else {
				if (sCIButtons.blackButton) {
					exitSequence_MainText_InitialTime_r1_Decreaser();
					enterSequence_MainText_InitialTime_r1_Decreaser_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_InitialTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean mainText_InitialTime_r1_start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.blackButton) {
				exitSequence_MainText_InitialTime_r1_start();
				enterSequence_MainText_InitialTime_r1_Decreaser_default();
				mainText_InitialTime_react(false);
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_MainText_InitialTime_r1_start();
					enterSequence_MainText_InitialTime_r1_Increaser_default();
					mainText_InitialTime_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = mainText_InitialTime_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean whiteGamer_WhiteWaits_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIButtons.blackButton) && (sCIVariables.getGameOn()))) {
				exitSequence_WhiteGamer_WhiteWaits();
				enterSequence_WhiteGamer_WhitePlaying_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean whiteGamer_WhitePlaying_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && (sCIDisplay.getWhiteDisplay()==0))) {
				exitSequence_WhiteGamer_WhitePlaying();
				sCIVariables.setGameOn(false);
				
				enterSequence_WhiteGamer_WhiteWaits_default();
			} else {
				if (sCIButtons.whiteButton) {
					exitSequence_WhiteGamer_WhitePlaying();
					enterSequence_WhiteGamer_Reseting_default();
				} else {
					if (sCIButtons.startButton) {
						exitSequence_WhiteGamer_WhitePlaying();
						sCIVariables.setGameOn(false);
						
						enterSequence_WhiteGamer_WhiteWaits_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[4]) {
				sCIDisplay.setWhiteDisplay(sCIDisplay.getWhiteDisplay() - 1);
			}
			if (((timeEvents[5]) && (sCIDisplay.getWhiteDisplay()<=5))) {
				sCIBeeper.operationCallback.beep();
			}
		}
		return did_transition;
	}
	
	private boolean whiteGamer_Reseting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_WhiteGamer_Reseting();
				enterSequence_WhiteGamer_WhiteWaits_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean whiteGamer_Start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_WhiteGamer_Start();
				enterSequence_WhiteGamer_WhitePlaying_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean blackGamer_BlackWaits_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCIButtons.whiteButton) && (sCIVariables.getGameOn()))) {
				exitSequence_BlackGamer_BlackWaits();
				enterSequence_BlackGamer_BlackPlaying_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean blackGamer_BlackPlaying_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7]) && (sCIDisplay.getBlackDisplay()==0))) {
				exitSequence_BlackGamer_BlackPlaying();
				sCIVariables.setGameOn(false);
				
				enterSequence_BlackGamer_BlackWaits_default();
				react();
			} else {
				if (sCIButtons.blackButton) {
					exitSequence_BlackGamer_BlackPlaying();
					enterSequence_BlackGamer_Reseting_default();
					react();
				} else {
					if (sCIButtons.startButton) {
						exitSequence_BlackGamer_BlackPlaying();
						sCIVariables.setGameOn(false);
						
						enterSequence_BlackGamer_BlackWaits_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			if (timeEvents[8]) {
				sCIDisplay.setBlackDisplay(sCIDisplay.getBlackDisplay() - 1);
			}
			if (((timeEvents[9]) && (sCIDisplay.getBlackDisplay()<=5))) {
				sCIBeeper.operationCallback.beep();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean blackGamer_Reseting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[10]) {
				exitSequence_BlackGamer_Reseting();
				enterSequence_BlackGamer_BlackWaits_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean blackGamer_Start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCIButtons.startButton) {
				exitSequence_BlackGamer_Start();
				enterSequence_BlackGamer_BlackWaits_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
